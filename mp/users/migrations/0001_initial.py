# Generated by Django 4.2 on 2023-05-30 17:44

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import mirage.fields
import mp.common.utils
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Config',
            fields=[
                ('created_at', models.DateTimeField(default=mp.common.utils.localtime)),
                ('updated_at', models.DateTimeField(default=mp.common.utils.localtime)),
                ('item', models.CharField(max_length=100, primary_key=True, serialize=False, verbose_name='配置项')),
                ('value', mirage.fields.EncryptedCharField(max_length=200, verbose_name='配置项值')),
                ('description', models.CharField(blank=True, default='', max_length=200, verbose_name='描述')),
            ],
            options={
                'verbose_name': '系统配置',
                'verbose_name_plural': '系统配置',
                'db_table': 'mp_config',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_at', models.DateTimeField(db_index=True, default=mp.common.utils.localtime)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('username', models.CharField(error_messages={'unique': '该用户名已经存在'}, help_text='要求，150字以内。字母、数字和@/。/ + / - / _。', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='用户名')),
                ('email', models.EmailField(blank=True, error_messages={'unique': '该email地址已经存在'}, max_length=255, unique=True, verbose_name='email 地址')),
                ('is_staff', models.BooleanField(default=False, help_text='指定用户是否可以登录到此管理站点', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='指定是否应将此用户视为活动用户。', verbose_name='激活状态')),
                ('nickname', models.CharField(default='', max_length=50, unique=True, verbose_name='昵称')),
                ('jwt_key', models.UUIDField(default=uuid.uuid4)),
                ('failed_login_count', models.IntegerField(default=0, verbose_name='失败计数')),
                ('last_login_failed_at', models.DateTimeField(blank=True, null=True, verbose_name='上次失败登录时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户管理',
                'verbose_name_plural': '用户管理',
                'db_table': 'mp_users',
                'permissions': (('add_user', '添加用户'), ('change_user', '修改用户'), ('delete_user', '删除用户'), ('view_user', '查看用户')),
                'managed': True,
                'default_permissions': (),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
